# Unique name for this workflow
name: Packaging on PR

# Workflow starts when receiving custom event sent by CI workflow or manually
on:
    workflow_dispatch:
        inputs:
            prerelease:
                description: 'Run on a prerelease org?'
                required: false
                type: boolean
            isBasePackageRelease:
                description: 'Package base app?'
                required: false
                type: boolean
            isSitePackageRelease:
                description: 'Package site?'
                required: false
                type: boolean
    repository_dispatch:
        types: [start-packaging-pr]

# Workflow environment variables
env:
    # Is the PR base branch a prerelease branch
    IS_PRERELEASE: ${{ github.event.client_payload.isPrelease || inputs.prerelease }}
    # Should the base package be released
    IS_BASE_PACKAGE_RELEASE: ${{ github.event.client_payload.isBasePackageRelease == 'true' || inputs.isBasePackageRelease }}
    # Should the site package be released
    IS_SITE_PACKAGE_RELEASE: ${{ github.event.client_payload.isSitePackageRelease == 'true' || inputs.isSitePackageRelease }}

# Jobs to be executed
jobs:
    packaging:
        runs-on: trailheadapps-Ubuntu
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  npm install @salesforce/cli --location=global
                  nodeInstallPath=$(npm config get prefix)
                  echo "$nodeInstallPath/bin" >> $GITHUB_PATH
                  sf --version

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v4

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: |
                  echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
                  secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
                  if [ $secretFileSize == 1 ]; then
                      echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
                      exit 1;
                  fi

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sf org login sfdx-url -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Remove auth file
            - name: 'Remove auth file'
              run: rm -f ./DEVHUB_SFDX_URL.txt

            # Modify local metadata for packaging
            - name: 'Modify local metadata for packaging'
              run: |
                  cp -rpv cc-service-app/main/default/corsWhitelistOrigins cc-base-app/main/default/
                  cp -rpv cc-service-app/main/default/cspTrustedSites cc-base-app/main/default/
                  cp -rpv cc-service-app/main/default/flows/* cc-base-app/main/default/flows/
                  rm -f cc-base-app/main/default/flows/Route_to_Agent.flow-meta.xml
                  sed '/<actionCalls>/,/<\/actionCalls>/d' cc-base-app/main/default/flows/Route_to_Queue.flow-meta.xml > cc-base-app/main/default/flows/Route_to_Queue_Temp.flow-meta.xml && mv cc-base-app/main/default/flows/Route_to_Queue_Temp.flow-meta.xml cc-base-app/main/default/flows/Route_to_Queue.flow-meta.xml
                  sed '/<recordUpdates>/,/<\/recordUpdates>/d' cc-base-app/main/default/flows/Route_to_Queue.flow-meta.xml > cc-base-app/main/default/flows/Route_to_Queue_Temp.flow-meta.xml && mv cc-base-app/main/default/flows/Route_to_Queue_Temp.flow-meta.xml cc-base-app/main/default/flows/Route_to_Queue.flow-meta.xml
                  awk '/<connector>/ {c=1; buffer=$0; next} c { buffer = buffer ORS $0; if (/<targetReference>Update_Messaging_Session<\/targetReference>/) found=1; if (/<\/connector>/) { if (found) { c=0; found=0; next } else print buffer; c=0; } next } {print}' cc-base-app/main/default/flows/Route_to_Queue.flow-meta.xml > cc-base-app/main/default/flows/Route_to_Queue_Temp.flow-meta.xml && mv cc-base-app/main/default/flows/Route_to_Queue_Temp.flow-meta.xml cc-base-app/main/default/flows/Route_to_Queue.flow-meta.xml

            # Create base package version
            - name: 'Create base package version'
              if: ${{ env.IS_BASE_PACKAGE_RELEASE }}
              run: |
                  set +e
                  json=$(sf package version create -p "Coral Cloud - Base" -x -w 60 --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "BASE_PACKAGE_VERSION_ID=$packageVersionId" >> $GITHUB_ENV
                  else
                      echo "Failed to create package version"
                  fi
                  exit $status

            # Create site package version
            - name: 'Create site package version'
              if: ${{ env.IS_SITE_PACKAGE_RELEASE }}
              run: |
                  set +e
                  json=$(sf package version create -p "Coral Cloud - Site" -x -w 60 --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "SITE_PACKAGE_VERSION_ID=$packageVersionId" >> $GITHUB_ENV
                  else
                      echo "Failed to create package version"
                  fi
                  exit $status

            # Wait for package replication
            - name: 'Wait for package replication (360s)'
              run: sleep 360s

            # Get latest base package version
            - name: 'Get latest base package version'
              if: ${{ !env.IS_BASE_PACKAGE_RELEASE }}
              run: |
                  set +e
                  json=$(sf package version list -r -o MajorVersion,MinorVersion,PatchVersion -p "Coral Cloud - Base" --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result[-1].SubscriberPackageVersionId')
                      echo "BASE_PACKAGE_VERSION_ID=$packageVersionId" >> $GITHUB_ENV
                  else
                      echo "Failed to read package versions"
                  fi
                  exit $status

            # Get latest site package version
            - name: 'Get latest site package version'
              if: ${{ !env.IS_SITE_PACKAGE_RELEASE }}
              run: |
                  set +e
                  json=$(sf package version list -r -o MajorVersion,MinorVersion,PatchVersion -p "Coral Cloud - Site" --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result[-1].SubscriberPackageVersionId')
                      echo "SITE_PACKAGE_VERSION_ID=$packageVersionId" >> $GITHUB_ENV
                  else
                      echo "Failed to read package versions"
                  fi
                  exit $status

            # Create prerelease scratch org
            - name: 'Create prerelease scratch org'
              if: ${{ env.IS_PRERELEASE }}
              run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1 --release=preview

            # Create scratch org
            - name: 'Create scratch org'
              if: ${{ !env.IS_PRERELEASE }}
              run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1

            # Install base package in scratch org
            - name: 'Install base package in scratch org'
              run: sf package install -p ${{ env.BASE_PACKAGE_VERSION_ID }} -w 10 -o scratch-org -r

            # Install site package in scratch org
            - name: 'Install site package in scratch org'
              run: sf package install -p ${{ env.SITE_PACKAGE_VERSION_ID }} -w 10 -o scratch-org -r

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: sf org delete scratch -p -o scratch-org
